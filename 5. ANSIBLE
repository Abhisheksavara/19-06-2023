DAY-01:

ANSIBLE:
Its a configuration management too1.

Configuration= Software & Hardware props of server
Management= Installing, deleting, updating 

Automate= serve creation, Software installation, Deployment
you can do automation in more than one server.

python is dependency for ansible.
we use yaml to write the code.
yml=yet another markup language

HISTORY:
2012 -- > maichel dehaan -- > RedHat 
we can use ansible in amazon linux, ubuntu, RedHat, Centos -----

==============================================================================

SETUP:
Create 5 servers (1=ansible 2=dev 2=test)
Connect all servers to mobaxterm

ALL SERVERS:
sudo -i
1. hostnamectl set-hostname ansible/dev-1/dev-2/test-1/test-2
sudo -i

2. passwd root
3. vim /etc/ssh/sshd_config (uncomment: 38 , no=yes: 63)
4. systemctl restart sshd
5. systemctl status sshd

ANSIBLE SERVER:
amazon-linux-extras install ansible2 -y
yum install python python-pip python-dlevel -y
vim /etc/ansible/hosts   (inventory file)  (below: 12 th line)

[dev]
172.31.81.244
172.31.93.180

[test]
172.31.91.255
172.31.93.101

vim /etc/ansible/ansible.cfg (uncomment 14, 22)

ssh-keygen  -- > enter 4 times
ssh-copy-id root@private_ip of dev-1 -- > yes -- > password 
ssh private_ip of dev-1
ctrl + d

ssh-copy-id root@private_ip of dev-2 -- > yes -- > password 
ssh private_ip of dev-2
ctrl + d

ssh-copy-id root@private_ip of test-1 -- > yes -- > password 
ssh private_ip of test-1
ctrl + d

ssh-copy-id root@private_ip of test-2 -- > yes -- > password 
ssh private_ip of test-2
ctrl + d


MODES OF WORKING
1. ADHOC COMMANDS:
its a simple linux commands.
we can use it for temperory works.
this commands will be overrided.

ansible all -a "ls"
ansible all -a "touch abc.txt"
ansible all -a "yum install git -y"
ansible all -a "yum install java-1.8.0-openjdk -y"
ansible all -a "yum install httpd -y"
ansible all -a "systemctl start httpd"
ansible all -a "systemctl status httpd"
ansible all -a "useradd raham"
ansible all -a "cat /etc/passwd"



HISTORY
 2  vim /etc/ssh/sshd_config
    3  systemctl resstart sshd
    4  systemctl restart sshd
    5  systemctl status sshd
    6  amazon-linux-extras install ansible2 -y
    7  yum install python python-pip python-dlevel -y
    8  vim /etc/ansible/hosts
    9  vim /etc/ansible/ansible.cfg
   10  vim /etc/ansible/hosts
   11  ssh-keygen
   12  ll
   13  ll -a
   14  cd .ssh/
   15  ll
   16  cat id_rsa
   17  cat id_rsa.pub
   18  cd
   19  hostname -i
   20  ssh-copy-id root@172.31.81.244
   21  ssh 172.31.81.244
   22  ssh-copy-id root@172.31.93.180
   23  ssh 172.31.93.180
   24  ssh-copy-id root@172.31.91.255
   25  ssh 172.31.91.255
   26  ssh-copy-id root@172.31.93.101
   27  ssh 172.31.93.101
   28  ansible all -a "ls"
   29  ansible all -a "touch file1"
   30  ansible all -a "ls"
   31  ansible all -a "touch abc.txt"
   32  ansible all -a "ls"
   33  ansible all -a "yum install git -y"
   34  ansible all -a "git -v"
   35  ansible all -a "yum install java-1.8.0-openjdk -y"
   36  ansible all -a "java -version"
   37  ansible all -a "yum install httpd -y"
   38  ansible all -a "systemctl start httpd"
   39  ansible all -a "systemctl status httpd"
   40  ansible all -a "useradd raham"
   41  ansible all -a "cat /etc/passwd"
   42  history


===================================================================

DAY-02:

2. MODULES:
its a key-value pair. key-value pair is also called as Dictonary
its will be reuseable.
we have different modules for different works.


ADHOC	: ansible all -a "yum install git -y"
MODULE	: ansible all -m yum -a "name=git state=present"

ansible all -m yum -a "name=java-1.8.0-openjdk state=present" 
ansible all -m yum -a "pkg=tree state=present"   
ansible all -m yum -a "pkg=tree state=absent"          [delet=absent]
ansible all -m yum -a "name=httpd state=present"       [install=present]
ansible all -m service -a "name=httpd state=started"   [start=started]
ansible all -m service -a "name=httpd state=stopped"   [stop=stopped]
ansible all -m user -a "name=vijay state=present"
ansible all -m copy -a "src=app.yml dest=/tmp"


3. PLAYBOOKS:
Its a collection of modules.
we can execute multiple modules at a single time.
onec you write the playbook it can re reuse.
in playbook we use yaml language.
yaml works on key-value pair.
and the langauge follows indentation.
For playbooks .yml or .yaml are the extensions.
Most of the configuration files in real time also use the yaml language.
TOOLS: Ansible, Docker, K8s.

by default ansible will execute the Gathering Facts.

EXAMPLES:

playbook1.yml

- hosts: all
  tasks:
    - name: Task-1
      yum: name=git state=present

    - name: TASK-2
      yum: name=httpd state=present

    - name: TASK-3
      service: name=httpd state=started

    - name: ABCD
      user: name=ramesh state=present

ansible-playbook playbook1.yml
======================================================================

TAGS: To execute/skip single/multi tasks on a playbook.
ansible all -m user -a "name=ramesh state=absent"


- hosts: all
  tasks:
    - name: Task-1
      yum: name=git state=present

    - name: TASK-2
      yum: name=httpd state=present

    - name: TASK-3
      service: name=httpd state=started

    - name: ABCD
      user: name=ramesh state=present

NEXT:

- hosts: all
  tasks:
    - name: Task-1
      yum: name=git state=absent
      tags: a

    - name: TASK-2
      yum: name=httpd state=absent
      tags: b

    - name: TASK-3
      service: name=httpd state=started
      tags: c

    - name: ABCD
      user: name=ramesh state=absent
      tags: d

SKIPPING SINGLE TASKS: ansible-playbook playbook1.yml --skip-tags "c"
SKIPPING MULTI TASKS : ansible-playbook playbook1.yml --skip-tags "c,d"
EXECUTING SINGLE TASK: ansible-playbook playbook1.yml --tags a
EXECUTING MULTI TASK: ansible-playbook playbook1.yml --tags a,b

HISTORY:

45  ansible all -a "yum install git -y"
   46  ansible all -a "yum remove git* -y"
   47  ansible all -m yum -a "name=git state=present"
   48  ansible all -m yum -a "name=java-1.8.0-openjdk state=present"
   49  ansible all -a "yum remove java* -y"
   50  ansible all -m yum -a "name=java-1.8.0-openjdk state=present"
   51  ansible all -m yum -a "pkg=tree state=present"
   52  ansible all -m yum -a "pkg=tree state=absent"
   53  ansible all -a "tree --version"
   54  ansible all -m yum -a "name=httpd state=present"
   55  ansible all -m yum -a "name=httpd state=absent"
   56  ansible all -m yum -a "name=httpd state=present"
   57  ansible all -m yum -a "name=httpd state=started"
   58  ansible all -m service -a "name=httpd state=started"
   59  ansible all -m service -a "name=httpd state=stopped"
   60  ansible all -m service -a "name=httpd state=started"
   61  ansible all -m user -a "name=vijay state=present"
   62  ansible all -a "cat /etc/passwd"
   63  ll
   64  vim abc.txt
   65  ll
   66  ansible all -m copy -a "src=abc.txt dest=/tmp"
   67  ansible all -a "ls"
   68  ansible all -a "cat abc.txt"
   69  cat abc.txt
   70  ansible all -a "ls /tmp"
   71  ansible all -a "cat /tmp/abc.txt"
   72  ll
   73  vim app.yml
   74  ll
   75  ansible all -m copy -a "src=app.yml dest=/tmp"
   76  ansible all -a "ls /tmp"
   77  rm -rf *
   78  vim playbook1.yml
   79  ansible all -a "yum remove git* httpd* -y"
   80  cat playbook1.yml
   81  ansible-playbook playbook1.yml
   82  vim playbook1.yml
   83  cat playbook1.yml
   84  ansible-playbook playbook1.yml
   85  ansible all -m user -a "name=ramesh state=absent"
   86  vim playbook1.yml
   87  ansible-playbook playbook1.yml
   88  vim playbook1.yml
   89  ansible-playbook playbook1.yml --skip-tags "c"
   90  vim playbook1.yml
   91  ansible-playbook playbook1.yml --skip-tags "c,d"
   92  vim playbook1.yml
   93  cat playbook1.yml
   94  ansible-playbook playbook1.yml --tags a,b
   95  cat playbook1.yml
   96  ansible-playbook playbook1.yml --tags d
