DAY-01:
MONOLITHIC: multiple services are deployed on single server with single database.

MICRO SERVICES: multiple services are deployed on multiple servers with multiple database.

CONTAINERS:
its same as a server/vm.
it will not have any operating system.
os will be on images.
(SERVER=AMI, CONTAINER=IMAGE)

DOCKER: 
Its an free & opensource tool.
used to create, run & deploy applications containers.
it is introduced on 2013 by solomenhykes & sebastian phal.
We used GO laguage to develope the docker.
here we write files on YAML.
before docker user faced lot of problems, but after docker there is no issues with the application.


CONTAINERIZATION:
Process of packing an application with its dependencies.
ex: PUBG

os level of virtualization.

VIRTUALIZATION:
able to create resouce with our hardware properties.

ARCHITECTURE & COMPONENTS:
client: it will interact with user
user gives commands and it will be executed by docker client

daemon: manages the docker components(images, containers, volumes)

host: where we install docker (ex: linux, windows, macos)

Registry: manages the images.

ARCHITECTURE OF DOCKER:
yum install docker -y    #client
systemctl start docker	 #client,Engine
systemctl status docker






COMMANDS:
docker pull ubuntu	: pull ubuntu image
docker images		: to see list of images
docker run -it --name cont1 ubuntu : to create a container
-it (interactive) - to go inside a container
cat /etc/os-release	: to see os flavour


apt update -y	: to update 
redhat=yum
ubuntu=apt
without update we cant install any pkg in ubuntu

apt install git -y
apt install apache2 -y
service apache2 start
service apache2 status

docker p q	: to exit container
docker ps -a	: to list all containers


HISTORY:

 1  yum install docker -y
    2  docker version
    3  systemctl start docker
    4  systemctl status docker
    5  docker version
    6  docker pull ubuntu
    7  docker images
    8  docker run -it --name cont1 ubuntu
    9  docker run -it --name cont2 -p 80 ubuntu
   10  docker ps -a
   11  history

==============================

DAY-02:

DAY-02:
Dockerfile:
It automates the image creation.
it will save time and memory.
in Docker file D is capital.
Components must be on Captial.

FROM 	: Base image
RUN	: To execute command (during image creation)
CMD	: To execute command (during container creation)
COPY	: Copies loca1 file to container
ADD	: Copies internet file to container
WORKDIR	: Dircetly go to target folder
LABEL	: To attach lables(name, email)
ENV	: To define variables inside container
ARGS	: To define variables outside container
ENTRYPOINT: high priority then CMD

EXAMPLE-1:
FROM ubuntu
RUN apt update -y
RUN apt install git -y
RUN apt install apache2 -y
RUN service apache2 start
CMD apt install maven -y

EXAMPLE-2:
FROM ubuntu
RUN apt update -y
RUN apt install git -y
RUN apt install apache2 -y
RUN service apache2 start
COPY abc.txt /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp


COMMANDS:
Build	: docker build -t image:v1 dockerfile-path
Inspect : docker inspect cont1
docker inspect cont4 | grep -i email

docker ps	: running containers
docker ps -a	: all containers
docker ps -a -q	: all containers ids

docker stop cont1: to stop container1
docker kill cont1: to stop container1


STOP VS KILL:
stop: it will take some time to stop the process running inside container
kill: it wont take time to stop the process running inside container

docker start cont1: to stop container1
docker top cont1


-it: interactive -- > go inside the container
-d : detach 	 -- > come out of container


DEPLOYMENT:

Dockerfile

FROM ubuntu
RUN apt-get update -y
RUN apt-get install apache2 -y
COPY index.html /var/www/html/
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]


index.html

<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Arial, Helvetica, sans-serif;}

/* Full-width input fields */
input[type=text], input[type=password] {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  box-sizing: border-box;
}

/* Set a style for all buttons */
button {
  background-color: #04AA6D;
  color: white;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
}

button:hover {
  opacity: 0.8;
}

/* Extra styles for the cancel button */
.cancelbtn {
  width: auto;
  padding: 10px 18px;
  background-color: #f44336;
}

/* Center the image and position the close button */
.imgcontainer {
  text-align: center;
  margin: 24px 0 12px 0;
  position: relative;
}

img.avatar {
  width: 40%;
  border-radius: 50%;
}

.container {
  padding: 16px;
}

span.psw {
  float: right;
  padding-top: 16px;
}

/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
  padding-top: 60px;
}

/* Modal Content/Box */
.modal-content {
  background-color: #fefefe;
  margin: 5% auto 15% auto; /* 5% from the top, 15% from the bottom and centered */
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
}

/* The Close Button (x) */
.close {
  position: absolute;
  right: 25px;
  top: 0;
  color: #000;
  font-size: 35px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: red;
  cursor: pointer;
}

/* Add Zoom Animation */
.animate {
  -webkit-animation: animatezoom 0.6s;
  animation: animatezoom 0.6s
}

@-webkit-keyframes animatezoom {
  from {-webkit-transform: scale(0)} 
  to {-webkit-transform: scale(1)}
}
  
@keyframes animatezoom {
  from {transform: scale(0)} 
  to {transform: scale(1)}
}

/* Change styles for span and cancel button on extra small screens */
@media screen and (max-width: 300px) {
  span.psw {
     display: block;
     float: none;
  }
  .cancelbtn {
     width: 100%;
  }
}
</style>
</head>
<body>

<h2>DevOps By Raham V:2.0</h2>

<button onclick="document.getElementById('id01').style.display='block'" style="width:auto;">Login</button>

<div id="id01" class="modal">
  
  <form class="modal-content animate" action="/action_page.php" method="post">
    <div class="imgcontainer">
      <span onclick="document.getElementById('id01').style.display='none'" class="close" title="Close Modal">&times;</span>
      <img src="img_avatar2.png" alt="Avatar" class="avatar">
    </div>

    <div class="container">
      <label for="uname"><b>Username</b></label>
      <input type="text" placeholder="Enter Username" name="uname" required>

      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" name="psw" required>
        
      <button type="submit">Login</button>
      <label>
        <input type="checkbox" checked="checked" name="remember"> Remember me
      </label>
    </div>

    <div class="container" style="background-color:#f1f1f1">
      <button type="button" onclick="document.getElementById('id01').style.display='none'" class="cancelbtn">Cancel</button>
      <span class="psw">Forgot <a href="#">password?</a></span>
    </div>
  </form>
</div>

<script>
// Get the modal
var modal = document.getElementById('id01');

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}
</script>

</body>
</html>


docker build -t image:v1 .
docker run -itd --name cont1 -p 90:80 image:v1 

HISTORY:

  1  docker version
    2  docker --version
    3  docker version
    4  vim Dockerfile
    5  ll
    6  docker build -t raham:v1 .
    7  vim Dockerfile
    8  docker build -t raham:v1 .
    9  docker images
   10  docker run -it --name cont1 raham:v1
   11  docker ps -a
   12  vim Dockerfile
   13  docker build -t raham:v1 .
   14  docker run -it --name cont2 raham:v1
   15  vim Dockerfile
   16  ll
   17  cat>abc.txt
   18  ll
   19  vim Dockerfile
   20  docker ps -a
   21  vim Dockerfile
   22  docker build -t raham:v1 .
   23  docker run -it --name cont3 raham:v1
   24  vim Dockerfile
   25  docker build -t raham:v1 .
   26  docker run -it --name cont4 raham:v1
   27  docker inspect cont4
   28  docker inspect cont4 | grep -i email
   29  docker inspect cont4
   30  docker inspect cont4 | grep -i email
   31  vim Dockerfile
   32  docker build -t raham:v1 .
   33  docker run -it --name cont5 raham:v1
   34  docker ps -a
   35  docker ps
   36  docker ps -a -q
   37  docker ps
   38  docker stop cont5
   39  docker ps
   40  docker ps -a
   41  docker ps
   42  docker kill cont4
   43  docker ps
   44  docker stop cont3
   45  docker kill cont1
   46  docker ps
   47  docker ps -a
   48  docker start cont5
   49  docker ps -a
   50  docker start cont4
   51  docker ps -a
   52  docker ps
   53  docker top cont5
   54  rm -rf *
   55  vim Dockerfile
   56  ll
   57  vim index.html
   58  docker build -t raham:v1 .
   59  cat Dockerfile
   60  docker run -itd --name appcont -p 90:80 raham:v1
   61  docker run -itd --name appcont2 -p 95:80 raham:v1
   62  docker run -itd --name appcont3 -p 92:80 raham:v1
   63  history
=============================================

DAY-03: VOLUMES

DAY-03:
VOLUMES:
It is used to store data inside container.
volume is a simple directory inside container.
containers uses host resources (cpu, ram, rom).
single volume can be shared to multiple containers.
ex: cont-1 (vol1)  --- > cont2 (vol1) & cont3 (vol1) & cont4 (vol1)
at a time we can share single volume to single container only.


3 WAYS:
1 WAY: 

Dockerfile:
FROM ubuntu
VOLUME ["/vol1"]

docker build -t swiggy:v1 .
docker run -it --name cont1 swiggy:v1

cd /vol
touch file{1..5}

ctrl p q

docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
 cd /vol1
ll

ctrl p q

==============================================================================

METHOD-2:

docker run -it --name cont3 -v vol2 ubuntu
docker run -it --name cont4 --volumes-from cont3 --privileged=true ubuntu

============================================================================

METHOD-3: MOUNT VOLUMES

Here volume we can create locally and attach to container

docker volume ls	: to list the volumes
docker volume create vol3 : to create a volume
docker volume inspect vol3 : to get information about volume
cd /var/lib/docker/volumes/vol3/_data
touch file{1..10}

docker run -it --name cont5 --mount source=vol3,destination=/vol3 ubuntu

docker volume rm vol4: to remove the volumes.
docker volume prune: to remove all unused volumes.

NOTE: we cannot remove volume which have data.

UP TO NOW WE SHARE VOLUMES FORM CONTAINER TO CONTAINER
NOW WE ARE GOING TO SHARE VOLUMES FORM LOCAL TO CONTAINER



LOCAL -- CONTAINER

touch file{1..10}
docker run -it --name cont6 -v /root:/abcd ubuntu


SYSTEM:
docker system df : to show componets info (short)
docker system df -v : to show componets info (long)
docker system events:


JENKINS SETUP ON DOCKER:

docker run -it --name jenkinscont -p 8080:8080 jenkins/jenkins:lts

HISTORY:

 41  yum install docker -y
   42  docker version
   43  systemctl start docker
   44  systemctl status docker
   45  docker version
   46  vim Dockerfile
   47*
   48  docker images
   49*
   50  docker ps
   51  docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
   52  docker attach cont1
   53  cat Dockerfile
   54  docker run -it --name cont3 -v vol2 ubuntu
   55  docker run -it --name cont4 --volumes-from cont3 --privileged=true ubuntu
   56  docker volume ls
   57  docker volume create vol3
   58  docker volume ls
   59  docker volume inspect vol3
   60  cd /var/lib/docker/volumes/vol3/_data
   61  touch local{1..10}
   62  ll
   63  docker run -it --name cont5 --mount source=vol3,destination=/vol3 ubuntu
   64  cd
   65  docker volume ls
   66  docker volume create vol4
   67  docker volume ls
   68  docker volume inspect vol4
   69  docker volume rm vol4
   70  docker volume ls
   71  docker volume
   72  touch file{1..10}
   73  ll
   74  docker run -it --name cont6 -v /root:/abcd ubuntu
   75  docker system
   76  docker system df
   77  docker system df -v
   78  docker system events
   79  docker run -it --name jenkinscont -p 8080:8080 jenkins/jenkins:lts
   80  docker ps -a
   81  docker ps -a -q
   82  docker stop $(docker ps -a -q)
   83  docker ps -a
   84  docker rm $(docker ps -a -q)
   85  docker ps -a
   86  docker ps
