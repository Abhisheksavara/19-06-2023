DAY-01:

KUBERNETES:
Its an alternative tool for docker swarm.
shortcut is k8s.
we have some limitations on docker swarm so we are using now k8s.

INTRO:
opensource platfrom written on go lang used to manage containers.
google invented it on 2014 but later given to cncf & initial version is 2015 

COMPONENTS:
ARCHITECTURE: CNPCA

MASTER NODE:
1. API SERVER: Used to communicate with k8s cluster.
2. ETCD: DB for k8s cluster.it store complete info of cluster.
3. SCHEDULER: used to schdule pods on worker nodes based on hw.
4. CONTROLLER: It will control the components of k8s.

WORKER NODE:
1. KUBELET: Its an agent, which infrom all actions to master.
2. KUBEPROXY: It deals with networking.
3. PODS: group of containers.

TYPES OF CLUSTER:
1. SELFMANAGED:
A. MINIKUBE: 
ITS A SINGLE NODE CLUSTER (MASTER & WORKER)
IN REAL TIME WE USE IT FOR DEV AND TEST ENVS.
NOTE: IT WILL NOT USED ON PROD.

MINIKUBE SETUP:

vim minikube.sh

sudo apt update -y
sudo apt upgrade -y
sudo apt install curl wget apt-transport-https -y
sudo curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo mv minikube-linux-amd64 /usr/local/bin/minikube
sudo chmod +x /usr/local/bin/minikube
sudo minikube version
sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
sudo echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
sudo minikube start --driver=docker --force

sh minikube.sh

=====================================
PODS:
its a group of containers.
k8s will work with pods only, it dont know about containers.
pod is the basic unit of deployment in k8s.

KUBECTL: its a tool used to execute commands on k8s cluster.

CREATION OF PODS:

1. IMPERATIVE METHOD: Through commands
2. DECLARATIVE METHOD: Through files (manifest files)

IMPERATIVE:
To create a pod		:kubectl run pod1 --image httpd
To list pods		:kubectl get po/pod/pods
To show addtional info	:kubectl get po -o wide
To show complete info	:kubectl describe pod pod1
To delete the pod	:kubectl delete pod pod1

DECLARATIVE:

vim abc.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod1
spec:
  containers:
    - name: cont1
      image: nginx

kubectl create -f abc.yml


HISTORY:

  1  vim minikube.sh
    2  sh minikube.sh
    3  minikube status
    4  kubectl run pod1 --image httpd
    5  kubectl get pods
    6  kubectl get pod
    7  kubectl get po
    8  kubectl get po/pod/pods
    9  kubectl get po -o wide
   10  kubectl describe pod pod1
   11  kubectl delete pod pod1
   12  kubectl run pod1 --image rahamshaik/trainservice:latest
   13  kubectl get po
   14  kubectl get po -o wide
   15  kubectl describe pod pod1
   16  kubectl delete pod pod1
   17  vim abc.yml
   18  kubectl create -f abc.yml
   19  kubectl get po
   20  kubectl describe pod pod1
   21  kubectl delete pod pod1
   22  history

====================================DAY-02: REPLICASET. LABELS & SELECTORS, DEPLOYMENT & KUBECOLRO, SCALING

REPLICASET:
It will create replicas of pod.
if we delete one pod it will create another one.
all pods will have same application inside it.


LABELS: is used to craete the particular pods as a single unit.
SELECTOR: Used to select pods with same labels.


vim replicaset.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  labels:
    app: swiggy
  name: swiggy-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: nginx


To list rs		:kubectl get rs/replicaset
To show addtional info	:kubectl get rs -o wide
To show complete info	:kubectl describe rs name-of-rs
To delete the rs	:kubectl delete rs name-of-rs

SCALING THE RS:
SCALE-UP: kubectl scale rs/swiggy-rs --replicas=10
SCALE-DOWN: kubectl scale rs/swiggy-rs --replicas=5

NOTE: It follows LIFO in deletion.

DRAWBACK:
it will not useful if application is update.
we need to update image manually one by one to rs.

DEPLOYMENT:
it is advannce than replicaset, used to update pods all at a time.
in real time we create deployments only.

deployment -- > rs -- > pods

vim abc.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: swiggy
  name: swiggy-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: nginx

kubectl create -f abc.yml
kubectl get deploy
kubectl get rs
kubectl get po
kubectl get po --show-labels

NOTE: when we update image old pods will deleted new pods will create.

TO UPDATE IMAGE: kubectl edit deploy/swiggy-deploy
kubectl describe deploy swiggy-deploy

KUBECOLOR:

wget https://github.com/hidetatz/kubecolor/releases/download/v0.0.25/kubecolor_0.0.25_Linux_x86_64.tar.gz
tar -zxvf kubecolor_0.0.25_Linux_x86_64.tar.gz
./kubecolor
chmod +x kubecolor
mv kubecolor /usr/local/bin/
kubecolor get po


HISTORY:

  1  vim minikube.sh
    2  sh minikube.sh
    3  kubectl run swiggy --image httpd
    4  kubectl get po
    5  kubectl delete pod swiggy
    6  kubectl get po
    7  vim abc.yml
    8  kubectl api-resources
    9  vim abc.yml
   10  kubectl create -f abc.yml
   11  vim abc.yml
   12  kubectl create -f abc.yml
   13  vim abc.yml
   14  kubectl create -f abc.yml
   15  kubectl api-resources
   16  kubectl get rs
   17  kubectl get rs -o wide
   18  kubectl describe rs swiggy-rs
   19  kubectl get po
   20  kubectl delete pod swiggy-rs-8pp9q
   21  kubectl get po
   22  kubectl delete po swiggy-rs-vqhrm
   23  kubectl get po
   24  kubectl delete pod swiggy-rs-2p6zs swiggy-rs-dbpwf swiggy-rs-rvzgt
   25  kubectl get po
   26  cat abc.yml
   27  kubectl get replicaset
   28  kubectl get rs
   29  kubectl delete rs swiggy-rs
   30  kubectl get rs
   31  kubectl get po
   32  kubectl create -f abc.yml
   33  kubectl get po
   34  kubectl scale rs/swiggy-rs --replicas=10
   35  kubectl get po
   36  kubectl scale rs/swiggy-rs --replicas=20
   37  kubectl get po
   38  kubectl scale rs/swiggy-rs --replicas=5
   39  kubectl get po
   40  cat abc.yml
   41  vim abc.yml
   42  kubectl create -f abc.yml
   43  kubectl get deploy
   44  kubectl get rs
   45  kubectl get po
   46  kubectl describe deploy swiggy-deploy
   47  kubectl edit deploy/swiggy-deploy
   48  kubectl describe deploy swiggy-deploy
   49  kubectl get po
   50  kubectl describe pod swiggy-deploy-9cc566b54-mcwbv
   51  kubectl describe pod swiggy-deploy-9cc566b54-rtj8t
   52  kubectl decsribe pod swiggy-deploy-9cc566b54-xwcqs
   53  kubectl describe pod swiggy-deploy-9cc566b54-xwcqs
   54  kubectl edit deploy/swiggy-deploy
   55  kubectl describe pod swiggy-deploy-9cc566b54-xwcqs
   56  kubectl describe deploy swiggy-deploy
   57  kubectl get po
   58  kubectl describe pod swiggy-deploy-7fdfcb7ffb-9p87n
   59  kubectl describe pod swiggy-deploy-7fdfcb7ffb-h6m9b
   60  kubectl get deploy
   61  kubectl scale deploy/swiggy-deploy --replicas=10
   62  kubectl get po
   63  kubectl get po --show-labels
   64  wget https://github.com/hidetatz/kubecolor/releases/download/v0.0.25/kubecolor_0.0.25_Linux_x86_64.ta                                                                                                                                                                                                                                                                      r.gz
   65  tar -zxvf kubecolor_0.0.25_Linux_x86_64.tar.gz
   66  ./kubecolor
   67  chmod +x kubecolor
   68  mv kubecolor /usr/local/bin/
   69  kubecolor get po
   70  kubecolor get deploy
   71  history

=============================================================================

DAY-03: KOPS

INFRA: Resources used to run our application on cloud.
ex: ec2, elb, asg, vpc ------

KOPS:
It is kubernetes operations.
create, delete, update the cluster.
currently aws and gcp is supporting.
automate the entire infrastructure for k8s.
its 3rd party tool free and opensource.


IAM -- > USERS -- > USERNAME: KOPSRAHAM -- > Attach policies directly -- > AdministratorAccess -- > next -- > create 

click -- > rahamkopss -- > security creds -- > Access keys -- > create access key -- > cli -- > select checkbox -- > next -- > create access key -- > download


SETUP:

PART-1: DOWNLOADING, MV AND GIVING PERMISSIONS


#vim .bashrc
#export PATH=$PATH:/usr/local/bin/
#source .bashrc


#! /bin/bash
aws configure
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
wget https://github.com/kubernetes/kops/releases/download/v1.25.0/kops-linux-amd64
chmod +x kops-linux-amd64 kubectl
mv kubectl /usr/local/bin/kubectl
mv kops-linux-amd64 /usr/local/bin/kops


PART-2: CREATING BUCKET TO STORE CLUSTER INFO

bucket is used to store objects(files)
versioning means it will retrive the deleted files.

aws s3api create-bucket --bucket heerashaik09.k8s.local --region us-east-1
aws s3api put-bucket-versioning --bucket heerashaik09.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
export KOPS_STATE_STORE=s3://heerashaik09.k8s.local

 
PART-3: CREATING CLUSTER

kops create cluster --name heerashaik09.k8s.local --zones us-east-1a --master-count=1 --master-size t2.medium --node-count=2 --node-size t2.micro
kops update cluster --name heerashaik09.k8s.local --yes --admin
kops validate cluster --wait 10m

SCALING THE CLUSTER:

 * list clusters with: kops get cluster
 * edit this cluster with: kops edit cluster heerashaik09.k8s.local
 * edit your node instance group: kops edit ig --name=heerashaik09.k8s.local nodes-us-east-1a
 * edit your master instance group: kops edit ig --name=heerashaik09.k8s.local master-us-east-1a

kops edit ig --name=heerashaik09.k8s.local nodes-us-east-1a
kops update cluster --name heerashaik09.k8s.local --yes
kops rolling-update cluster

TO DELET CLUTSTER: kops delete cluster --name heerashaik09.k8s.local --yes

HISTORY:

 1  aws configure
    2  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    3  wget https://github.com/kubernetes/kops/releases/download/v1.25.0/kops-linux-amd64
    4  chmod +x kops-linux-amd64 kubectl
    5  mv kubectl /usr/local/bin/kubectl
    6  mv kops-linux-amd64 /usr/local/bin/kops
    7  kops --version
    8  kubectl --version
    9  vim .bashrc
   10  source .bashrc
   11  kops --version
   12  kubectl --version
   13  kubectl
   14  aws s3api create-bucket --bucket rahamssshaik09.k8s.local --region us-east-1
   15  vim .aws/credentials
   16  aws s3api create-bucket --bucket rahamssshaik09.k8s.local --region us-east-1
   17  aws s3api create-bucket --bucket heerashaik09.k8s.local --region us-east-1
   18  aws s3api put-bucket-versioning --bucket heerashaik09.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
   19  export KOPS_STATE_STORE=s3://heerashaik09.k8s.local
   20  kops create cluster --name heerashaik09.k8s.local --zones us-east-1a --master-count=1 --master-size t2.medium --node-count=2                                                                                                                                                                                 --node-size t2.micro
   21  kops update cluster --name heerashaik09.k8s.local --yes --admin
   22  kops validate cluster --wait 10m
   23  kops edit ig --name=heerashaik09.k8s.local nodes-us-east-1a
   24  kops update cluster --name heerashaik09.k8s.local --yes
   25  kops rolling-update cluster
   26  kops edit ig --name=heerashaik09.k8s.local nodes-us-east-1a
   27  kops rolling-update cluster
   28  kops update cluster --name heerashaik09.k8s.local --yes
   29  kops rolling-update cluster
   30  kops edit ig --name=heerashaik09.k8s.local nodes-us-east-1a
   31  kops update cluster --name heerashaik09.k8s.local --yes
   32  kops rolling-update cluster
   33  kops edit ig --name=heerashaik09.k8s.local nodes-us-east-1a
   34  kops update cluster --name heerashaik09.k8s.local --yes
   35  kops rolling-update cluster
   36  kubectl get no
   37  kops get cluster
   38  kubectl get no
   39  vim deploy.yml
   40  kubectl create -f deploy.yml
   41  kubectl get po
   42  kubectl get po -o wide
   43  kubectl scale deploy/swiggy-deploy --replicas=9
   44  kubectl get po -o wide
   45  kubectl scale deploy/swiggy-deploy --replicas=12
   46  kubectl get po -o wide
   47  kops delete cluster --name heerashaik09.k8s.local --yes
   48  history
  
